{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "canvas.svelte",
    "gate.svelte",
    "input.svelte",
    "output.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte';\n\timport Canvas from './canvas.svelte';\n\n\tlet canvas;\n\n\tonMount(async () => {\n        document.addEventListener('contextmenu', event => event.preventDefault());       \n    });\n\n\tfunction handleClick() {\n\t\talert(\"pressed\");\n\t}\n</script>\n\n<style>\n\tbutton {\n\t\twidth: 90%;\n\t\tmargin: 5%;\n\t}\n\t.main {\n\t\twidth: 100%;\n\t\theight: 100%; \n\t\toverflow: hidden;\n\t}\n\t.menu {\n\t\twidth: 85px; \n\t\tfloat: left; \n\t\theight: 100%; \n\t\tbackground-color: white;\n\t\tz-index: 1;\n\t\tposition: relative;\n\t}\n\t.canvas {\n\t\tmargin-left: 85px; \n\t\theight: 100%;\n\t}\n</style>\n\n<div class=\"main\">\n\t<div class=\"menu\">\n\t\t<button on:click={() => canvas.addGate(\"AND\")}>AND</button>\n\t\t<button on:click={() => canvas.addGate(\"NAND\")}>NAND</button>\n\t\t<button on:click={() => canvas.debugGates()}>DEBUG</button>\n\t</div>\n\t<div class=\"canvas\">\n\t\t<Canvas bind:this={canvas}/>\n\t</div>\n</div>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import Gate from './gate.svelte';\r\n    import Wire from './wire.svelte';\r\n    import { NAND } from './js/gates.js'\r\n\r\n    class Vector {\r\n        constructor(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        add(v) {\r\n            this.x += v.x;\r\n            this.y += v.y;\r\n        }\r\n        sub(v) {\r\n            this.x -= v.x;\r\n            this.y -= v.y;\r\n        }\r\n        scale(n) {\r\n            this.x *= n;\r\n            this.y *= n;\r\n        }\r\n    };\r\n\r\n    let gates = [\r\n        //{ id: '0', position: new Vector(64,32),  image: \"./build/AND_GATE.svg\", gate: new NAND() },\r\n        //{ id: '1', position: new Vector(128,0), image: \"./build/AND_GATE.svg\",  gate: new NAND() }\r\n    ];\r\n\r\n    let wires = [\r\n        \r\n    ];\r\n\r\n    let mousePosition;\r\n    let workspaceDom;\r\n    let zoomLayerDom;\r\n\r\n    let gridSpacing;\r\n\r\n    let isPlacing = false;\r\n    let placingGate;\r\n\r\n    let scale = 1;\r\n    let screenPos = new Vector(0, 0);\r\n    let isGrabbing = false;\r\n    let begGrabPos;\r\n    let endGrabPos;\r\n\r\n    onMount(async () => {\r\n        //Call the update function on all the gates that already exist\r\n    });\r\n\r\n    function mouseDown(event) {\r\n        //Placing a gate\r\n        if (isPlacing) {\r\n            //Add to list of gates\r\n            gates = [...gates, placingGate];\r\n            isPlacing = false;\r\n            //Update simulator\r\n            placingGate.gate.update();\r\n        }\r\n        if (event.button === 2) {\r\n            //Moving around the workspace\r\n            isGrabbing = true;\r\n            begGrabPos = new Vector(event.pageX, event.pageY);\r\n        }\r\n    }\r\n    function mouseUp(event) {\r\n        if (event.button === 2) {\r\n            //Moving around the workspace\r\n            isGrabbing = false;\r\n            endGrabPos = new Vector(event.pageX, event.pageY);\r\n\r\n            begGrabPos.sub(endGrabPos);\r\n            screenPos.sub(begGrabPos);\r\n\r\n            document.getElementById(\"zoomLayer\").style.left = screenPos.x + \"px\";\r\n            document.getElementById(\"zoomLayer\").style.top = screenPos.y + \"px\";\r\n        }\r\n    }\r\n    function mouseMove(event) {\r\n        //Keep mouse position\r\n        mousePosition = new Vector(event.pageX, event.pageY);\r\n        //Move the gate being placed to the cursor when the mouse moves\r\n        if (isPlacing) {\r\n            //Lock to grid movement\r\n            let zoomLayerOffset = offset(zoomLayerDom);\r\n            zoomLayerOffset.left *= (1/scale);\r\n            zoomLayerOffset.top *= (1/scale);\r\n            let gatePos = new Vector((1/scale) * event.pageX - zoomLayerOffset.left, (1/scale) * event.pageY - zoomLayerOffset.top);\r\n            placingGate.position = new Vector(Math.round((gatePos.x / 32) - 0.5) * 32, Math.round((gatePos.y / 32) - 0.5) * 32);\r\n        }\r\n        //Move the wire being placed\r\n        if (isWire) {\r\n            let zoomLayerOffset = offset(zoomLayerDom);\r\n            zoomLayerOffset.left *= (1/scale);\r\n            zoomLayerOffset.top *= (1/scale);\r\n            let wirePos = new Vector((1/scale) * event.pageX - zoomLayerOffset.left, (1/scale) * event.pageY - zoomLayerOffset.top);\r\n            placingWire.endPos = new Vector(wirePos.x, wirePos.y);\r\n        }\r\n        //Moving around the workspace\r\n        if (isGrabbing) {\r\n            endGrabPos = new Vector(event.pageX, event.pageY);\r\n\r\n            var begGrabCopy = new Vector(begGrabPos.x, begGrabPos.y);\r\n\r\n            begGrabCopy.sub(endGrabPos);\r\n            screenPos.sub(begGrabCopy);\r\n\r\n            document.getElementById(\"zoomLayer\").style.left = screenPos.x + \"px\";\r\n            document.getElementById(\"zoomLayer\").style.top = screenPos.y + \"px\";\r\n\r\n            begGrabPos = new Vector(endGrabPos.x, endGrabPos.y);\r\n        }\r\n    }\r\n    \r\n    function keypressing(event) {\r\n        if (event.key === '=') { //Plus key\r\n            if (scale < 3)\r\n                scale += 0.25;\r\n        }\r\n        else if (event.key === '-') { //Minus key\r\n            if (scale > 0.25)\r\n                scale -= 0.25;\r\n        }\r\n        document.getElementById(\"zoomLayer\").style.transform = \"scale(\" + scale + \")\";\r\n    }\r\n\r\n    export function addGate(gateType) {\r\n        switch (gateType) {\r\n        case \"AND\":\r\n            let zoomLayerOffset = offset(zoomLayerDom);\r\n            zoomLayerOffset.left *= (1/scale);\r\n            zoomLayerOffset.top *= (1/scale);\r\n            placingGate = { \r\n                position: new Vector((1/scale) * event.pageX - zoomLayerOffset.left, (1/scale) * event.pageY - zoomLayerOffset.top), \r\n                image: \"./build/AND_GATE.svg\",\r\n                gate: new NAND()\r\n            }\r\n            isPlacing = true;\r\n            break;\r\n        case \"NAND\":\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n    let isWire = false;\r\n    let placingWire;\r\n\r\n    export function outputCallback(x_pos, y_pos, outWire) {\r\n        isWire = true;\r\n        placingWire = {\r\n            startPos: new Vector(x_pos, y_pos),\r\n            endPos: new Vector(x_pos, y_pos),\r\n            wire: outWire\r\n        };\r\n    }\r\n\r\n    export function inputCallback(x_pos, y_pos, inWireIndex, inGate) {\r\n        if (isWire) {\r\n            isWire = false;\r\n            placingWire.endPos = new Vector(x_pos, y_pos);\r\n            wires = [...wires, placingWire];\r\n            //Connect simulator\r\n            placingWire.wire.gate = inGate;\r\n            placingWire.wire.port = inGate.Inputs[inWireIndex];\r\n            placingWire.wire.port.setState(placingWire.wire.getState());\r\n            \r\n            //Update the simulator\r\n            placingWire.wire.gate.update();\r\n        }\r\n    }\r\n\r\n    export function debugGates() {\r\n        //Print info about all gates\r\n        console.log(\"Gate debug:\");\r\n        console.log(\"Gates: \");\r\n        for(var i = 0; i < gates.length; i++)\r\n            console.log(gates[i].gate)\r\n    }\r\n\r\n    function offset(el) {\r\n        var rect = el.getBoundingClientRect(),\r\n        scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\r\n        scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n        return { top: rect.top + scrollTop, left: rect.left + scrollLeft }\r\n    }\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        position: relative;\r\n\r\n        transform: scale(1);\r\n    }\r\n    .workspace {\r\n        background-color: #d6d6d6;\r\n    }\r\n    #zoomLayer {\r\n        background-image: url(./grid.png);\r\n        width: 2048px;\r\n        height: 2048px;\r\n    }\r\n    .wire {\r\n        position: relative;\r\n        z-index: -2;\r\n    }\r\n</style>\r\n\r\n<svelte:window on:mousedown={mouseDown} on:mouseup={mouseUp} on:mousemove={mouseMove} on:keypress={keypressing}/>\r\n\r\n<div class=\"workspace\" bind:this={workspaceDom}>\r\n    <div id=\"zoomLayer\" bind:this={zoomLayerDom}>\r\n        <div class=\"wire\">\r\n            <svg width=\"2048\" height=\"2048\">\r\n                {#each wires as wire, i}\r\n                    <Wire start_x_pos={wires[i].startPos.x} start_y_pos={wires[i].startPos.y}\r\n                        end_x_pos={wires[i].endPos.x} end_y_pos={wires[i].endPos.y} wire={placingWire.wire}\r\n                    />\r\n                {/each}\r\n                {#if isWire}\r\n                    <Wire start_x_pos={placingWire.startPos.x} start_y_pos={placingWire.startPos.y}\r\n                        end_x_pos={placingWire.endPos.x} end_y_pos={placingWire.endPos.y} wire={placingWire.wire}\r\n                    />\r\n                {/if}\r\n            </svg>\r\n        </div>\r\n        {#each gates as gate, i}\r\n            <Gate x_pos={gates[i].position.x} y_pos={gates[i].position.y}\r\n                image={gates[i].image} gate={gates[i].gate} outputCallback={outputCallback} inputCallback={inputCallback}\r\n            />\r\n        {/each}\r\n        {#if isPlacing}\r\n            <Gate x_pos={placingGate.position.x} y_pos={placingGate.position.y} image={placingGate.image} gate={placingGate.gate}/>\r\n        {/if}\r\n    </div>\r\n</div>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import Input from './input.svelte';\r\n    import Output from './output.svelte';\r\n\r\n    export let x_pos = 0;\r\n    export let y_pos = 0;\r\n    export let image;\r\n\r\n    export let inputCallback;\r\n    export let outputCallback;\r\n\r\n    export let gate;\r\n\r\n    let dom;\r\n\r\n    onMount(async () => {\r\n        //Move to position assigned by the creator on startup\r\n\t\tdom.style.left = x_pos + \"px\";\r\n        dom.style.top = y_pos + \"px\";\r\n        dom.style.backgroundImage = \"url(\" + image + \")\";     \r\n    });\r\n\r\n    function updatePosition() {\r\n        if (dom) {\r\n            dom.style.left = x_pos + \"px\";\r\n            dom.style.top = y_pos + \"px\";\r\n        }\r\n    }\r\n\r\n    //Called whenever x or y position is updated externally from parent or internally\r\n    $: if (x_pos || y_pos) {\r\n        updatePosition();\r\n    } \r\n\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n        width: 32px;\r\n        height: 32px;\r\n        background-repeat: no-repeat;\r\n        position: absolute;\r\n        z-index: -1;\r\n    }\r\n</style>\r\n\r\n<div bind:this={dom}>\r\n    {#each gate.Inputs as input, i}\r\n        <Input x_pos={-26} y_pos={i * 16} wireIndex={i} gate={gate} inputCallback={inputCallback}/>\r\n    {/each}\r\n    {#each gate.Outputs as output, i}\r\n        <Output x_pos={42} y_pos={7} wire={output} outputCallback={outputCallback}/>\r\n    {/each}\r\n</div>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import { Wire } from './js/gates.js'\r\n\r\n    export let x_pos = 0;\r\n    export let y_pos = 0;\r\n\r\n    export let wireIndex;\r\n    export let gate;\r\n\r\n    export let inputCallback;\r\n\r\n    let line_dom;\r\n    let circle_dom;\r\n\r\n    onMount(async () => {\r\n\t\tcircle_dom.style.left = x_pos + \"px\";\r\n        circle_dom.style.top = y_pos + \"px\";\r\n        circle_dom.style.backgroundImage = \"url(build/PORT_CIRCLE.svg)\";\r\n\r\n        line_dom.style.left = x_pos + 11 + \"px\";\r\n        line_dom.style.top = y_pos + 7 + \"px\";\r\n        line_dom.style.backgroundImage = \"url(build/PORT_LINE.svg)\";\r\n    });\r\n\r\n    function hoving(event) {\r\n        circle_dom.style.transform = \"scale(\" + 1.5 + \")\";\r\n    }\r\n    function leaveing() {\r\n        circle_dom.style.transform = \"scale(\" + 1 + \")\";\r\n    }\r\n    function mouseDown() {\r\n        let temp = circle_dom.parentNode.style;\r\n        inputCallback(x_pos + parseInt(temp.left) + 8, y_pos + parseInt(temp.top) + 8, wireIndex, gate);\r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n        width: 16px;\r\n        height: 16px;\r\n        /* background-image: url(./PORT.svg); */\r\n        background-repeat: no-repeat;\r\n        position: absolute;\r\n        z-index: -1;\r\n    }\r\n    .line {\r\n        width: 16px;\r\n        height: 3px;\r\n    }\r\n</style>\r\n\r\n<div class=\"line\" bind:this={line_dom}>\r\n</div>\r\n<div class=\"port\" bind:this={circle_dom} on:mouseover={hoving} on:mouseout={leaveing} on:mousedown={mouseDown}>\r\n</div>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import { Wire } from './js/gates.js'\r\n\r\n    export let x_pos = 0;\r\n    export let y_pos = 0;\r\n\r\n    export let wire;\r\n\r\n    export let outputCallback;\r\n\r\n    let line_dom;\r\n    let circle_dom;\r\n\r\n    onMount(async () => {\r\n\t\tcircle_dom.style.left = x_pos + \"px\";\r\n        circle_dom.style.top = y_pos + \"px\";\r\n        circle_dom.style.backgroundImage = \"url(build/PORT_CIRCLE.svg)\";\r\n\r\n        line_dom.style.left = x_pos - 11 + \"px\";\r\n        line_dom.style.top = y_pos + 7 + \"px\";\r\n        line_dom.style.backgroundImage = \"url(build/PORT_LINE.svg)\";\r\n    });\r\n\r\n    function hoving(event) {\r\n        circle_dom.style.transform = \"scale(\" + 1.5 + \")\";\r\n    }\r\n    function leaveing() {\r\n        circle_dom.style.transform = \"scale(\" + 1 + \")\";\r\n    }\r\n    function mouseDown() {\r\n        let temp = circle_dom.parentNode.style;\r\n        outputCallback(x_pos + parseInt(temp.left) + 8, y_pos + parseInt(temp.top) + 8, wire);\r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n        width: 16px;\r\n        height: 16px;\r\n        /* background-image: url(./PORT.svg); */\r\n        background-repeat: no-repeat;\r\n        position: absolute;\r\n        z-index: -1;\r\n    }\r\n    .line {\r\n        width: 16px;\r\n        height: 3px;\r\n    }\r\n</style>\r\n\r\n<div class=\"line\" bind:this={line_dom}>\r\n</div>\r\n<div class=\"port\" bind:this={circle_dom} on:mouseover={hoving} on:mouseout={leaveing} on:mousedown={mouseDown}>\r\n</div>"
  ],
  "names": [],
  "mappings": "AAgBC,MAAM,eAAC,CAAC,AACP,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,EAAE,AACX,CAAC,AACD,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,AACjB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,OAAO,eAAC,CAAC,AACR,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,AACb,CAAC;AC4JD,GAAG,eAAC,CAAC,AACE,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAEZ,QAAQ,CAAE,QAAQ,CAElB,SAAS,CAAE,MAAM,CAAC,CAAC,AACvB,CAAC,AACD,UAAU,eAAC,CAAC,AACR,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AACD,UAAU,eAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,UAAU,CAAC,CACjC,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,MAAM,AAClB,CAAC,AACD,KAAK,eAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACf,CAAC;AC7KJ,GAAG,cAAC,CAAC,AACE,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,iBAAiB,CAAE,SAAS,CAC5B,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACf,CAAC;ACLJ,GAAG,eAAC,CAAC,AACE,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAEZ,iBAAiB,CAAE,SAAS,CAC5B,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACf,CAAC,AACD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,AACf,CAAC;ACZJ,GAAG,eAAC,CAAC,AACE,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAEZ,iBAAiB,CAAE,SAAS,CAC5B,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACf,CAAC,AACD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,AACf,CAAC"
}